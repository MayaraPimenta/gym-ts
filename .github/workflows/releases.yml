name: PR Review & Release

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - master
      - main
  pull_request_target:
    types: [closed]

permissions:
  pull-requests: write
  contents: write

jobs:
  comment-on-pr:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Check if gh is working
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          echo "Obtendo commits da PR..."
          RESPONSE=$(gh pr view ${{ github.event.pull_request.number }} --json commits)
          echo "Resposta do gh: $RESPONSE"
          
          COMMITS=$(echo "$RESPONSE" | jq -r '.commits[].message')
          echo "gh: $COMMITS"

      - name: Get PR commits
        id: get_pr_commits
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          COMMITS=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[].messageHeadline' || echo "")
      
          if [ -z "$COMMITS" ]; then
            echo "FORMATTED_COMMITS=ðŸš€ Nenhum commit encontrado na PR." >> $GITHUB_ENV
            exit 0
          fi
      
          FORMATTED_COMMITS=""
          LAST_SC=""
      
          while IFS= read -r line; do
            if [[ "$line" =~ ^\[sc-[0-9]+\] ]]; then
              FORMATTED_COMMITS+="\n### $line\n"
              LAST_SC="$line"
            else
              if [[ -n "$LAST_SC" ]]; then
                FORMATTED_COMMITS+="\n- $line"
              else
                FORMATTED_COMMITS+="\n### Outros Commits\n- $line"
                LAST_SC="OUTROS"
              fi
            fi
          done <<< "$COMMITS"

          echo "FORMATTED_COMMITS<<EOF" >> $GITHUB_ENV
          echo -e "$FORMATTED_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV 

      - name: Comment on PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "ðŸš€ **Commits da PR:**  
          ${{ env.FORMATTED_COMMITS }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Determine next version
        id: bump_version
        run: |
          MAJOR=$(echo "${{ env.LATEST_TAG }}" | cut -d. -f1)
          MINOR=$(echo "${{ env.LATEST_TAG }}" | cut -d. -f2)
          PATCH=$(echo "${{ env.LATEST_TAG }}" | cut -d. -f3)

          if gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | grep -q 'major'; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | grep -q 'minor'; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package.json
        run: |
          jq --arg newVersion "${{ env.NEW_VERSION }}" '.version = $newVersion' package.json > tmp.json && mv tmp.json package.json
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Get merged commits formatted
        id: get_merged_commits
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMITS=$(git log --pretty=format:"%s" $(git describe --tags --abbrev=0)..HEAD)

          FORMATTED_COMMITS=""
          LAST_SC=""

          while IFS= read -r line; do
            if [[ "$line" =~ ^\[sc-[0-9]+\] ]]; then
              FORMATTED_COMMITS+="\n### $line\n"
              LAST_SC="$line"
            else
              if [[ -n "$LAST_SC" ]]; then
                FORMATTED_COMMITS+="\n- $line"
              else
                FORMATTED_COMMITS+="\n### Outros Commits\n- $line"
                LAST_SC="OUTROS"
              fi
            fi
          done <<< "$COMMITS"

          echo "MERGED_COMMITS<<EOF" >> $GITHUB_ENV
          echo -e "$FORMATTED_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.NEW_VERSION }}"
          name: "Release v${{ env.NEW_VERSION }}"
          body: |
            ðŸš€ **Nova versÃ£o v${{ env.NEW_VERSION }} lanÃ§ada!**
            
            **Commits incluÃ­dos:**
            ${{ env.MERGED_COMMITS }}
          draft: false
          prerelease: false


name: PR Review & Release

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - master
  pull_request_target:
    types: [closed]

jobs:
  comment-on-pr:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get PR commits with SC IDs
        id: get_pr_commits
        run: |
          COMMITS=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[].message')
          SC_COMMITS=$(echo "$COMMITS" | grep -E "^\[sc-[0-9]+\]" || echo "Nenhum commit com SC ID encontrado.")
          echo "SC_COMMITS<<EOF" >> $GITHUB_ENV
          echo "$SC_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with SC commits
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "ðŸš€ **Commits com SC IDs:**  
          ${{ env.SC_COMMITS }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Determine next version
        id: bump_version
        run: |
          MAJOR=$(echo "${{ env.LATEST_TAG }}" | cut -d. -f1)
          MINOR=$(echo "${{ env.LATEST_TAG }}" | cut -d. -f2)
          PATCH=$(echo "${{ env.LATEST_TAG }}" | cut -d. -f3)

          if gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | grep -q 'major'; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | grep -q 'minor'; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package.json
        run: |
          jq '.version = "${{ env.NEW_VERSION }}"' package.json > tmp.json && mv tmp.json package.json
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Get merged commits with SC IDs
        id: get_merged_commits
        run: |
            COMMITS=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD | grep -E "^\[sc-[0-9]+\]" || echo "Nenhum commit com SC ID encontrado.")
            echo "MERGED_SC_COMMITS<<EOF" >> $GITHUB_ENV
            echo "$COMMITS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
            tag_name: "v${{ env.NEW_VERSION }}"
            name: "Release v${{ env.NEW_VERSION }}"
            body: |
              ðŸš€ **Nova versÃ£o v${{ env.NEW_VERSION }} lanÃ§ada!**
              
              **Commits com SC IDs:**
              ${{ env.MERGED_SC_COMMITS }}
            draft: false
            prerelease: false
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
